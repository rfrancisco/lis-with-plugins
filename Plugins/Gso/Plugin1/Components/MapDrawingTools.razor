@inject IJSRuntime JSRuntime

<div style="position: absolute; top: 200px; right: 0px;" class="map-btn">
    <MudIconButton Class="map-btn" Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Medium" OnClick="Toggle" />
    @if (visible) {
        <MudStack Row="true" Spacing="1" Class="" Style="position: fixed; right: 60px; top: 280px;">
            @foreach (var tool in tools) {
                <MudIconButton Class="@(activeTool != null && activeTool.Name == tool.Name ? "map-btn active" : "map-btn")" Icon="@tool.Icon"Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Medium" Style="position: relative" OnClick="() => SetDrawingTool(tool)" />
            }
            <MudIconButton Class="map-btn" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Medium" Style="position: relative" OnClick="() => DeleteSelectedShape()" />
        </MudStack>
    }
</div>
<MudMenu PositionAtCursor="true" @ref="ctxMenu" Dense="true" PopoverClass="context-menu" Class="context-menu-fix">
    @switch (ctxMenuContext) {
        case "map":
            <MudMenuItem OnClick="() => PasteSelectedShape()">Paste</MudMenuItem>
            break;
        case "shape":
            <MudMenuItem OnClick="() => CopySelectedShape()">Copy</MudMenuItem>
            <MudMenuItem OnClick="() => PasteSelectedShape()">Paste</MudMenuItem>
            <MudMenuItem OnClick="() => DeleteSelectedShape()">Delete</MudMenuItem>
            break;
    }
</MudMenu>

@code {
    bool visible = false;
    MapDrawingTool activeTool;
    MudMenu ctxMenu;
    string ctxMenuContext;
    DotNetObjectReference<MapDrawingTools> objRef;
    MapDrawingTool[] tools = { 
        new MapDrawingTool("pan", MudBlazor.Icons.Material.Outlined.PanTool),
        new MapDrawingTool("marker", MudBlazor.Icons.Material.Outlined.AddLocation),
        new MapDrawingTool("circle", MudBlazor.Icons.Material.Outlined.Circle),
        new MapDrawingTool("rectangle", MudBlazor.Icons.Material.Outlined.Rectangle),
        new MapDrawingTool("polyline", MudBlazor.Icons.Material.Outlined.Polyline),
        new MapDrawingTool("polygon", MudBlazor.Icons.Material.Outlined.Pentagon),
     };

    protected override async Task OnInitializedAsync() {
        objRef = DotNetObjectReference.Create(this);
        await MapExtensions.Instance.InitializeAsync(JSRuntime);
        await MapExtensions.Instance.InitializeDrawingTools(objRef);
    }

    void Toggle() {
        visible = !visible;
    }

    async Task SetDrawingTool(MapDrawingTool tool) {
        activeTool = tool;
        await MapExtensions.Instance.SetDrawingTool(tool.Name);
    }

    async Task CopySelectedShape() {
        Console.WriteLine("c# copy");
        await MapExtensions.Instance.CopySelectedShape();
    }

    async Task PasteSelectedShape() {
        Console.WriteLine("c# paste");
        await MapExtensions.Instance.PasteSelectedShape();
    }

    async Task DeleteSelectedShape() {
        Console.WriteLine("c# delete");
        await MapExtensions.Instance.DeleteSelectedShape();
    }

    async Task SetColor(string color) {
        await MapExtensions.Instance.SetColor(color);
    }

    [JSInvokable]
    public void ShowContextMenu(int clientX, int clientY, string context) {
        // Set the current context menu context (shape or map)
        ctxMenuContext = context;

        Console.WriteLine($"{clientX} - {clientY}");
        ctxMenu.OpenMenu(new MouseEventArgs() {
            OffsetX = clientX,
            OffsetY = clientY,
        });
    }

    [JSInvokable]
    public void HideContextMenu() {
        Console.WriteLine("Close context menu");
        ctxMenu.CloseMenu();
    }

    record MapDrawingTool(string Name, string Icon);
}